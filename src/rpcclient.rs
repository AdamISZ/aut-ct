use toy_rpc::Client;

// import everything including the client stub generated by the macro
use autct::rpc::*;
use std::env;
use std::fs;

#[tokio::main]
async fn main() {
    let args: Vec<String> = env::args().collect();
    // this is essentially a name, not a file: when
    // the server receives it, they can look up locally
    // the file/data with the same name and assume it's
    // the corresponding key set
    let pubkey_file_str = args[1].clone();
    // TODO this will be another user defined argument:
    let proof_file_str = &args[2];
    let buf = fs::read(proof_file_str).unwrap();
    let addr = "127.0.0.1:23333";
    let mut client = Client::dial(addr).await.unwrap();
    // TODO while testing keep this long but we will dial it back
    client.set_default_timeout(std::time::Duration::from_secs(300));
    let result: i32 = client
    .r_p_c_proof_verifier().verify((pubkey_file_str, buf))
    .await
    .unwrap();
println!("{:?}", result);
}

