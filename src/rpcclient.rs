use toy_rpc::Client;
use autct::config::AutctConfig;

// import everything including the client stub generated by the macro
use autct::rpc::*;
use std::env;
use std::fs;

#[tokio::main]
async fn main() {
    let args: Vec<String> = env::args().collect();
    let autctcfg: AutctConfig = confy::load("autct", None).expect("Config failed to load");
    let rpc_port = autctcfg.rpc_port;
    let host: &str= &autctcfg.rpc_host;
    let port_str: &str = &rpc_port.to_string();
    let addr: String = format!("{}:{}", host, port_str);
    // this is essentially a name, not a file: when
    // the server receives it, they can look up locally
    // the file/data with the same name and assume it's
    // the corresponding key set
    let pubkey_file_str = args[1].clone();
    // TODO this will be another user defined argument:
    let proof_file_str = &args[2];
    let buf = fs::read(proof_file_str).unwrap();
    let mut client = Client::dial(&addr).await.unwrap();
    client.set_default_timeout(std::time::Duration::from_secs(3));
    let result: i32 = client
    .r_p_c_proof_verifier().verify((pubkey_file_str, buf))
    .await
    .unwrap();
println!("{:?}", result);
}

