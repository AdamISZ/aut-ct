use toy_rpc::Client;
use autct::config::AutctConfig;

// import everything including the client stub generated by the macro
use autct::rpc::*;
use std::error::Error;
use std::fs;

pub async fn do_request(autctcfg: AutctConfig) -> Result<(), Box<dyn Error>>{
    let rpc_port = autctcfg.rpc_port;
    let host: &str= &autctcfg.rpc_host.unwrap();
    let port_str: &str = &rpc_port.unwrap().to_string();
    let addr: String = format!("{}:{}", host, port_str);
    let pubkey_file_str = autctcfg.keyset.unwrap();
    let proof_file_str = autctcfg.proof_file_str.unwrap();
    let buf = fs::read(proof_file_str).unwrap();
    let mut client = Client::dial(&addr).await.unwrap();
    client.set_default_timeout(std::time::Duration::from_secs(3));
    let result: i32 = client
    .r_p_c_proof_verifier().verify((pubkey_file_str, buf))
    .await
    .unwrap();
    // Result 1 means verification passed
    // TODO result will contain resource gained from usage
    println!("{:?}", result);
    Ok(())
}

